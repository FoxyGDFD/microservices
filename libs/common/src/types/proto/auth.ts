// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.1
//   protoc               v3.20.3
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface RegisterRequest {
  name: string;
  email: string;
  password: string;
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface GenerateTokensResponse {
  accessToken: string;
  refreshToken: string;
}

export interface ValidateAccessTokenRequest {
  token: string;
}

export interface ValidateAccessTokenResponse {
  isValid: boolean;
  userId: string;
  role: string;
}

export interface RefreshTokensRequest {
  refreshToken: string;
}

export interface CreateUserRequest {
  name: string;
  email: string;
  password: string;
  role?: string | undefined;
}

export interface User {
  id: string;
  name: string;
  email: string;
}

export interface GetUserRequest {
  id: string;
}

export interface UpdateUserRequest {
  id?: string | undefined;
  name?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  role?: string | undefined;
}

export interface DeleteUserRequest {
  id: string;
}

export interface ListUsersRequest {
  limit?: number | undefined;
  offset?: number | undefined;
}

export interface ListUsersResponse {
  users: User[];
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  register(request: RegisterRequest): Observable<GenerateTokensResponse>;

  login(request: LoginRequest): Observable<GenerateTokensResponse>;

  validateAccessToken(request: ValidateAccessTokenRequest): Observable<ValidateAccessTokenResponse>;

  refreshTokens(request: RefreshTokensRequest): Observable<GenerateTokensResponse>;
}

export interface AuthServiceController {
  register(
    request: RegisterRequest,
  ): Promise<GenerateTokensResponse> | Observable<GenerateTokensResponse> | GenerateTokensResponse;

  login(
    request: LoginRequest,
  ): Promise<GenerateTokensResponse> | Observable<GenerateTokensResponse> | GenerateTokensResponse;

  validateAccessToken(
    request: ValidateAccessTokenRequest,
  ): Promise<ValidateAccessTokenResponse> | Observable<ValidateAccessTokenResponse> | ValidateAccessTokenResponse;

  refreshTokens(
    request: RefreshTokensRequest,
  ): Promise<GenerateTokensResponse> | Observable<GenerateTokensResponse> | GenerateTokensResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["register", "login", "validateAccessToken", "refreshTokens"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";

export interface UserServiceClient {
  createUser(request: CreateUserRequest): Observable<User>;

  getUser(request: GetUserRequest): Observable<User>;

  updateUser(request: UpdateUserRequest): Observable<User>;

  deleteUser(request: DeleteUserRequest): Observable<User>;

  listUsers(request: ListUsersRequest): Observable<ListUsersResponse>;
}

export interface UserServiceController {
  createUser(request: CreateUserRequest): Promise<User> | Observable<User> | User;

  getUser(request: GetUserRequest): Promise<User> | Observable<User> | User;

  updateUser(request: UpdateUserRequest): Promise<User> | Observable<User> | User;

  deleteUser(request: DeleteUserRequest): Promise<User> | Observable<User> | User;

  listUsers(request: ListUsersRequest): Promise<ListUsersResponse> | Observable<ListUsersResponse> | ListUsersResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "getUser", "updateUser", "deleteUser", "listUsers"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
