// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               v3.20.3
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'auth';

export interface CreateUserRequest {
  name: string;
  email: string;
  password: string;
}

export interface GenerateTokensRequest {
  email: string;
  password: string;
}

export interface GenerateTokensResponse {
  accessToken: string;
  refreshToken: string;
}

export interface ValidateAccessTokenRequest {
  token: string;
}

export interface ValidateAccessTokenResponse {
  isValid: boolean;
  userId: string;
}

export interface RefreshTokensRequest {
  refreshToken: string;
}

export const AUTH_PACKAGE_NAME = 'auth';

export interface AuthServiceClient {
  register(request: CreateUserRequest): Observable<GenerateTokensResponse>;

  login(request: GenerateTokensRequest): Observable<GenerateTokensResponse>;

  validateAccessToken(
    request: ValidateAccessTokenRequest,
  ): Observable<ValidateAccessTokenResponse>;

  refreshTokens(
    request: RefreshTokensRequest,
  ): Observable<GenerateTokensResponse>;
}

export interface AuthServiceController {
  register(
    request: CreateUserRequest,
  ):
    | Promise<GenerateTokensResponse>
    | Observable<GenerateTokensResponse>
    | GenerateTokensResponse;

  login(
    request: GenerateTokensRequest,
  ):
    | Promise<GenerateTokensResponse>
    | Observable<GenerateTokensResponse>
    | GenerateTokensResponse;

  validateAccessToken(
    request: ValidateAccessTokenRequest,
  ):
    | Promise<ValidateAccessTokenResponse>
    | Observable<ValidateAccessTokenResponse>
    | ValidateAccessTokenResponse;

  refreshTokens(
    request: RefreshTokensRequest,
  ):
    | Promise<GenerateTokensResponse>
    | Observable<GenerateTokensResponse>
    | GenerateTokensResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'register',
      'login',
      'validateAccessToken',
      'refreshTokens',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const AUTH_SERVICE_NAME = 'AuthService';
